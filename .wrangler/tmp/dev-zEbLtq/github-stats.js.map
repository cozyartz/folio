{
  "version": 3,
  "sources": ["../bundle-fImsDG/checked-fetch.js", "../bundle-fImsDG/strip-cf-connecting-ip-header.js", "../../../src/worker/github-stats.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-fImsDG/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-fImsDG/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/cozart-lundin/code/folio/.wrangler/tmp/dev-zEbLtq",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", "/**\n * Cloudflare Worker for GitHub Stats\n * Generates SVG cards with GitHub user statistics\n */\n\ninterface GitHubUser {\n  login: string;\n  name: string;\n  public_repos: number;\n  followers: number;\n  following: number;\n  created_at: string;\n}\n\ninterface GitHubRepo {\n  stargazers_count: number;\n  forks_count: number;\n  language: string;\n}\n\ninterface GitHubStats {\n  totalStars: number;\n  totalForks: number;\n  totalRepos: number;\n  followers: number;\n  following: number;\n  joinedYear: number;\n  topLanguages: { [key: string]: number };\n}\n\nexport default {\n  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\n    const url = new URL(request.url);\n    const username = url.searchParams.get('username') || 'cozyartz';\n    const theme = url.searchParams.get('theme') || 'dark';\n    \n    // CORS headers\n    const corsHeaders = {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    };\n\n    if (request.method === 'OPTIONS') {\n      return new Response(null, { headers: corsHeaders });\n    }\n\n    if (request.method !== 'GET') {\n      return new Response('Method not allowed', { status: 405, headers: corsHeaders });\n    }\n\n    try {\n      // Check cache first\n      const cache = caches.default;\n      const cacheKey = new Request(`https://github-stats/${username}/${theme}`, request);\n      let response = await cache.match(cacheKey);\n\n      if (!response) {\n        // Fetch GitHub data\n        const stats = await fetchGitHubStats(username);\n        \n        // Generate SVG\n        const svg = generateStatsCard(stats, username, theme);\n        \n        response = new Response(svg, {\n          headers: {\n            'Content-Type': 'image/svg+xml',\n            'Cache-Control': 'public, max-age=3600', // Cache for 1 hour\n            ...corsHeaders,\n          },\n        });\n\n        // Store in cache\n        ctx.waitUntil(cache.put(cacheKey, response.clone()));\n      }\n\n      return response;\n    } catch (error) {\n      console.error('Error generating GitHub stats:', error);\n      \n      // Return error SVG\n      const errorSvg = generateErrorCard(theme);\n      return new Response(errorSvg, {\n        status: 200, // Return 200 to prevent broken images\n        headers: {\n          'Content-Type': 'image/svg+xml',\n          'Cache-Control': 'public, max-age=300', // Cache errors for 5 minutes\n          ...corsHeaders,\n        },\n      });\n    }\n  },\n};\n\nasync function fetchGitHubStats(username: string): Promise<GitHubStats> {\n  const headers = {\n    'User-Agent': 'GitHub-Stats-Worker',\n    'Accept': 'application/vnd.github.v3+json',\n  };\n\n  // Fetch user data\n  const userResponse = await fetch(`https://api.github.com/users/${username}`, { headers });\n  if (!userResponse.ok) {\n    throw new Error(`Failed to fetch user data: ${userResponse.status}`);\n  }\n  const userData: GitHubUser = await userResponse.json();\n\n  // Fetch repositories\n  const reposResponse = await fetch(`https://api.github.com/users/${username}/repos?per_page=100&sort=updated`, { headers });\n  if (!reposResponse.ok) {\n    throw new Error(`Failed to fetch repositories: ${reposResponse.status}`);\n  }\n  const repos: GitHubRepo[] = await reposResponse.json();\n\n  // Calculate stats\n  const totalStars = repos.reduce((sum, repo) => sum + repo.stargazers_count, 0);\n  const totalForks = repos.reduce((sum, repo) => sum + repo.forks_count, 0);\n  \n  // Count languages\n  const topLanguages: { [key: string]: number } = {};\n  repos.forEach(repo => {\n    if (repo.language) {\n      topLanguages[repo.language] = (topLanguages[repo.language] || 0) + 1;\n    }\n  });\n\n  return {\n    totalStars,\n    totalForks,\n    totalRepos: userData.public_repos,\n    followers: userData.followers,\n    following: userData.following,\n    joinedYear: new Date(userData.created_at).getFullYear(),\n    topLanguages,\n  };\n}\n\nfunction generateStatsCard(stats: GitHubStats, username: string, theme: string): string {\n  const isDark = theme === 'dark';\n  const bgColor = isDark ? 'rgba(15, 23, 42, 0.95)' : 'rgba(255, 255, 255, 0.95)';\n  const textColor = isDark ? '#ffffff' : '#1e293b';\n  const subtitleColor = isDark ? '#94a3b8' : '#64748b';\n  const accentColor = '#3b82f6';\n  const secondaryAccent = '#10b981';\n  \n  // Get top 3 languages\n  const topLangs = Object.entries(stats.topLanguages)\n    .sort(([,a], [,b]) => b - a)\n    .slice(0, 3);\n\n  return `\n<svg width=\"495\" height=\"195\" viewBox=\"0 0 495 195\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n  <defs>\n    <linearGradient id=\"bg-gradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n      <stop offset=\"0%\" style=\"stop-color:${accentColor};stop-opacity:0.1\" />\n      <stop offset=\"50%\" style=\"stop-color:${secondaryAccent};stop-opacity:0.05\" />\n      <stop offset=\"100%\" style=\"stop-color:${accentColor};stop-opacity:0.1\" />\n    </linearGradient>\n    <filter id=\"glow\">\n      <feGaussianBlur stdDeviation=\"3\" result=\"coloredBlur\"/>\n      <feMerge> \n        <feMergeNode in=\"coloredBlur\"/>\n        <feMergeNode in=\"SourceGraphic\"/>\n      </feMerge>\n    </filter>\n  </defs>\n  \n  <!-- Background -->\n  <rect width=\"495\" height=\"195\" rx=\"10\" fill=\"${bgColor}\" stroke=\"rgba(255,255,255,0.1)\" stroke-width=\"1\"/>\n  <rect width=\"495\" height=\"195\" rx=\"10\" fill=\"url(#bg-gradient)\"/>\n  \n  <!-- Header -->\n  <text x=\"25\" y=\"35\" font-family=\"'Segoe UI', Ubuntu, Sans-Serif\" font-size=\"18\" font-weight=\"600\" fill=\"${textColor}\">\n    ${username}'s GitHub Stats\n  </text>\n  \n  <!-- Stats Grid -->\n  <!-- Total Stars -->\n  <g transform=\"translate(25, 60)\">\n    <circle cx=\"8\" cy=\"8\" r=\"3\" fill=\"${accentColor}\" filter=\"url(#glow)\"/>\n    <text x=\"20\" y=\"12\" font-family=\"'Segoe UI', Ubuntu, Sans-Serif\" font-size=\"14\" font-weight=\"600\" fill=\"${textColor}\">\n      ${formatNumber(stats.totalStars)}\n    </text>\n    <text x=\"20\" y=\"28\" font-family=\"'Segoe UI', Ubuntu, Sans-Serif\" font-size=\"12\" fill=\"${subtitleColor}\">\n      Total Stars\n    </text>\n  </g>\n  \n  <!-- Total Forks -->\n  <g transform=\"translate(140, 60)\">\n    <circle cx=\"8\" cy=\"8\" r=\"3\" fill=\"${secondaryAccent}\" filter=\"url(#glow)\"/>\n    <text x=\"20\" y=\"12\" font-family=\"'Segoe UI', Ubuntu, Sans-Serif\" font-size=\"14\" font-weight=\"600\" fill=\"${textColor}\">\n      ${formatNumber(stats.totalForks)}\n    </text>\n    <text x=\"20\" y=\"28\" font-family=\"'Segoe UI', Ubuntu, Sans-Serif\" font-size=\"12\" fill=\"${subtitleColor}\">\n      Total Forks\n    </text>\n  </g>\n  \n  <!-- Total Repos -->\n  <g transform=\"translate(255, 60)\">\n    <circle cx=\"8\" cy=\"8\" r=\"3\" fill=\"#a855f7\" filter=\"url(#glow)\"/>\n    <text x=\"20\" y=\"12\" font-family=\"'Segoe UI', Ubuntu, Sans-Serif\" font-size=\"14\" font-weight=\"600\" fill=\"${textColor}\">\n      ${stats.totalRepos}\n    </text>\n    <text x=\"20\" y=\"28\" font-family=\"'Segoe UI', Ubuntu, Sans-Serif\" font-size=\"12\" fill=\"${subtitleColor}\">\n      Repositories\n    </text>\n  </g>\n  \n  <!-- Followers -->\n  <g transform=\"translate(370, 60)\">\n    <circle cx=\"8\" cy=\"8\" r=\"3\" fill=\"#f59e0b\" filter=\"url(#glow)\"/>\n    <text x=\"20\" y=\"12\" font-family=\"'Segoe UI', Ubuntu, Sans-Serif\" font-size=\"14\" font-weight=\"600\" fill=\"${textColor}\">\n      ${formatNumber(stats.followers)}\n    </text>\n    <text x=\"20\" y=\"28\" font-family=\"'Segoe UI', Ubuntu, Sans-Serif\" font-size=\"12\" fill=\"${subtitleColor}\">\n      Followers\n    </text>\n  </g>\n  \n  <!-- Top Languages -->\n  <g transform=\"translate(25, 110)\">\n    <text x=\"0\" y=\"15\" font-family=\"'Segoe UI', Ubuntu, Sans-Serif\" font-size=\"14\" font-weight=\"600\" fill=\"${textColor}\">\n      Top Languages\n    </text>\n    ${topLangs.map((lang, index) => `\n      <g transform=\"translate(${index * 120}, 25)\">\n        <rect x=\"0\" y=\"0\" width=\"8\" height=\"8\" rx=\"2\" fill=\"${getLanguageColor(lang[0])}\" filter=\"url(#glow)\"/>\n        <text x=\"15\" y=\"8\" font-family=\"'Segoe UI', Ubuntu, Sans-Serif\" font-size=\"12\" fill=\"${textColor}\">\n          ${lang[0]}\n        </text>\n        <text x=\"15\" y=\"20\" font-family=\"'Segoe UI', Ubuntu, Sans-Serif\" font-size=\"10\" fill=\"${subtitleColor}\">\n          ${lang[1]} repos\n        </text>\n      </g>\n    `).join('')}\n  </g>\n  \n  <!-- Join Year -->\n  <text x=\"400\" y=\"180\" font-family=\"'Segoe UI', Ubuntu, Sans-Serif\" font-size=\"10\" fill=\"${subtitleColor}\">\n    Since ${stats.joinedYear}\n  </text>\n</svg>`.trim();\n}\n\nfunction generateErrorCard(theme: string): string {\n  const isDark = theme === 'dark';\n  const bgColor = isDark ? 'rgba(15, 23, 42, 0.95)' : 'rgba(255, 255, 255, 0.95)';\n  const textColor = isDark ? '#ffffff' : '#1e293b';\n  const subtitleColor = isDark ? '#94a3b8' : '#64748b';\n\n  return `\n<svg width=\"495\" height=\"195\" viewBox=\"0 0 495 195\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n  <rect width=\"495\" height=\"195\" rx=\"10\" fill=\"${bgColor}\" stroke=\"rgba(255,255,255,0.1)\" stroke-width=\"1\"/>\n  \n  <text x=\"247.5\" y=\"90\" font-family=\"'Segoe UI', Ubuntu, Sans-Serif\" font-size=\"16\" font-weight=\"600\" fill=\"${textColor}\" text-anchor=\"middle\">\n    GitHub Stats Unavailable\n  </text>\n  \n  <text x=\"247.5\" y=\"115\" font-family=\"'Segoe UI', Ubuntu, Sans-Serif\" font-size=\"12\" fill=\"${subtitleColor}\" text-anchor=\"middle\">\n    Please try again later\n  </text>\n</svg>`.trim();\n}\n\nfunction formatNumber(num: number): string {\n  if (num >= 1000000) {\n    return (num / 1000000).toFixed(1) + 'M';\n  }\n  if (num >= 1000) {\n    return (num / 1000).toFixed(1) + 'k';\n  }\n  return num.toString();\n}\n\nfunction getLanguageColor(language: string): string {\n  const colors: { [key: string]: string } = {\n    'TypeScript': '#3178c6',\n    'JavaScript': '#f1e05a',\n    'Python': '#3572A5',\n    'Java': '#b07219',\n    'Go': '#00ADD8',\n    'Rust': '#dea584',\n    'C++': '#f34b7d',\n    'C': '#555555',\n    'PHP': '#4F5D95',\n    'Ruby': '#701516',\n    'Swift': '#fa7343',\n    'Kotlin': '#A97BFF',\n    'Dart': '#00B4AB',\n    'HTML': '#e34c26',\n    'CSS': '#563d7c',\n    'Shell': '#89e051',\n    'Vue': '#41b883',\n    'React': '#61dafb',\n  };\n  \n  return colors[language] || '#6b7280';\n}", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/cozart-lundin/code/folio/src/worker/github-stats.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/cozart-lundin/code/folio/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/cozart-lundin/code/folio/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/cozart-lundin/code/folio/src/worker/github-stats.ts\";\n\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/cozart-lundin/code/folio/.wrangler/tmp/bundle-fImsDG/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/cozart-lundin/code/folio/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/cozart-lundin/code/folio/.wrangler/tmp/bundle-fImsDG/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/cozart-lundin/code/folio/.wrangler/tmp/bundle-fImsDG/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
